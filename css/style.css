:root{
    --blanco: #ffffff;
    --oscuro: #212121;
    --primario: #ffc107;
    --secundario: #0097a7;
    --gris: #757575;
    --grisclaro: #DFE9F3;
}
html{
    font-size: 62.5%;
    box-sizing: border-box;
    background-image: linear-gradient(to top var(--grisclaro) 0%, var(--blanco) 100%);
    scroll-snap-type: y mandatory; /* La letra "y" hace referencia al eje y que quiere
decir que se enfoca en el scroll vertical. Mandatory define que tan estricto se requiere
el scroll. Otra alternativa menos estricta es proximity */
}
*, *::before, *::after{
    box-sizing: inherit;
}
body{
    font-size: 16px;
    font-family: 'Krub', sans-serif;
}
.sombra{
    /*Sombra del elemento del borde*/
    box-shadow: 0px 0px 15px 0px rgba(112,112,112,0.48);
    -webkit-box-shadow: 0px 0px 15px 0px rgba(112,112,112,0.48);
    -moz-box-shadow: 0px 0px 15px 0px rgba(112,112,112,0.48);
    background-color: var(--blanco);
    padding: 2rem; /*espacio interior*/
    border-radius: 1rem;/*esquinas redondeadas*/
}
/*Tipografias*/
h1{
    font-size: 3.8rem;
}
h2{
    font-size: 2.8rem;
}
h3{
    font-size: 1.8rem;
}
h1, h2, h3{
    text-align: center;
}
/*Titulos*/
.titulo span{
    font-size: 2rem;
}
.navegacion-principal{
    background-color: var(--secundario);
}
.contenedor{
    max-width: 120rem;
    margin-top: 0;
    margin-right: auto;
    margin-bottom: 0;
    margin-left: auto;
}
.nav-bg{
    background-color: var(--secundario);
}
.navegacion-principal{
    
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    /*justify-content sirev para filas*/
    font-weight: bold;
    font-size: 2rem;
    text-align: center;
}
.navegacion-principal a{
    padding: 1rem;
    color: var(--blanco);
    text-decoration: none;
}
.navegacion-principal a:hover{
    background-color: var(--primario);
    color: var(--oscuro);
}
@media (min-width: 768px) {
    .navegacion-principal{
        flex-direction: row;
    }
}
/*  Hero */

.hero{
    background-image: url(../images/hero.jpg);/*../ es para regresar un nivel de directorio*/
    background-repeat: no-repeat;
    background-size: cover; /*cubrir la imagen en todo el tamaño de la pantalla*/
    height: 450px;
    position: relative; /*el padre debe ser relativo*/
    margin-bottom: 2rem;
}
.contenedor-hero{
    position: absolute; /*el hijo debe ser absolute*/
    background-color: rgba(0, 0, 0, .7);
    width: 100%;
    height: 100%;
    /*para alinear vertical y horizontalmente */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
.contenedor-hero h2, .contenedor-hero p{
    color: var(--blanco);
}
.ubicacion{
    display: flex;
    align-items: flex-end;
}
.boton{
    background-color: var(--secundario); /*color del fondo del boton*/
    text-decoration: none;
    padding: 1rem 3rem;
    border-radius: .5rem; /*esquinas redondeadas del boton*/
    color: var(--blanco); /*color de la letra*/
    margin-top: 3rem; /*espacio exterior hacia arriba*/
    font-weight: bold;
    font-size: 2rem;
    text-transform: uppercase; /*convertir a mayusculas*/
    text-align: center;
    width: 90%;
}
@media (min-width: 768px){
    .boton{
        width: auto;
    }
  
}
/*servicios*/

@media (min-width: 768px){
    .servicios{
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        column-gap: 1rem; /*Distancia entre columnas*/
    }
}


.servicio{
    display: flex;
    flex-direction: column;
    align-items: center;
}
.servicio h3{
    color: var(--secundario);
    font-weight: normal;

}
.servicio p{
    line-height: 2; /*interlineado de parrafo*/
    text-align: center;
}

.servicio .iconos {
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%;
    display: flex;
    justify-content: space-evenly;
    align-items: center;

}
.formulario {
    background-color: var(--gris);
    width: min(60rem, 100%); /* Ahorra media querys. ¿Qué es más pequeño, 60rem o el
   100% del tamaño de la pantalla? Ejemplo: Sí tengo un dispositivo móvil con 488px de
   ancho, es más pequeño el 100%, por lo que tomará ese valor y no los 60 rem. Caso
   contrario, tengo una tablet con 768px, ahí sí es menor 60 rem, por lo que se tomará ese
   valor */
    margin: 0 auto;
    /* Usarlo si el padre no es un display flex (siendo así se usaría el justify-content,
   el formulario tiene block por defaulf */
    padding: 2rem;
    border-radius: 1rem;
   
}
.formulario fieldset {
    border: none;
}
.formulario legend {
    text-align: center;
    font-size: 1.8rem;
    font-weight: bold;
    margin-bottom: 2rem;
    text-transform: uppercase;
    color: var(--primario);
}
.contenedor-campos{
    align-items: center;
    display: block;
}
.campo{
    margin-bottom: 1rem;
}
.campo label{
    color: var(--blanco);
    font-weight: bold;
    margin-bottom: .5rem;
    display: block; /* Logra que cada label tome todo el espacio disponible y estar
separado del input */
}
.input-text{
 width: 100%;
 border: none;
 padding: 1.5rem;
 border-radius: .5rem;
}
.campo textarea {
 height: 20rem; /* Hacer más grande la altura del textarea*/
}
/* Botón */
.boton{
    background-color: var(--secundario); /* Color de fondo del botón */
    color: var(--blanco); /* Color del texto */
    padding: 1rem 3rem; /* Espacio interior */
    margin-top: 3rem; /* Separación superior*/
    font-size: 2rem; /* Tamaño de la letra */
    text-decoration: none; /* Quitar el subrayado */
    text-transform: uppercase; /* Convertir texto en mayúsculas */
    font-weight: bold; /* Texto en negritas */
    border-radius: .5rem; /* Esquinas redondeadas */
    width: 90%; /* Ancho del botón, que abarque el 90% posible si se encuentra en una
   pantalla pequeña */
    text-align: center; /* Centrar el texto del botón */
    border: none; /* Esto afecta únicamente al boton de la etiqueta "input", si esta
   propiedad no existe en el enlace "a" , simplemente lo ignora */
   }
   @media (min-width: 768px) {
    .boton {
    width: auto;
    }
   }
   .boton:hover{
    cursor: pointer;
   }
   /* Utilidades */
.w-sm-100{
    width: 100%;
   }
   @media (min-width: 768px) {
    .w-sm-100{
    width: auto;
    }
   }
   .flex{
    display: flex;
   }
   .alinear-derecha{
    justify-content: flex-end;
   }
   /* Navegación principal */
.nav-bg{
    background-color: var(--secundario);
   }
   @media (min-width: 768px) {
    .contenedor-campos{
        display: grid;
        grid-template-columns: repeat(2,1fr);
        column-gap: 1rem;
        grid-template-rows: auto auto 20rem; /* Darle el espacio de cada fila*/
    }
}
    /* También se podría crear la clase de ayuda campo-correo para llamar el selector,
   pero se recomienda no crear nuevas clases si no es estrictamente necesario.
    nth-child significa el # del hijo. El orden sería: nombre, teléfono, correo, mensaje.
   Como requerimos modificar correo y mensaje, usaremos 3 y 4 en nth-child */
    .campo:nth-child(3),
    .campo:nth-child(4){
    grid-column: 1/3; /* Para posicionar el elemento, "que vaya de la columna 1 a la
   3*/
    }
    /* Footer */
.footer {
    text-align: center;
}
/* Scroll snap */
.titulo,
.servicios-heading,
.contacto-heading {
 scroll-snap-align: start; /* Indica el punto en el contenedor de desplazamiento al que
debe ajustarse el contenido*/
 scroll-snap-stop: always; /* Controla si el desplazamiento debe detenerse siempre en
los puntos de ajuste */
}